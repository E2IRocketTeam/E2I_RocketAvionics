#include <Wire.h>

// MPU-9250 I2C 주소
#define MPU9250_ADDRESS 0x68
#define AK8963_ADDRESS 0x0C

// MPU-9250 레지스터
#define WHO_AM_I_MPU9250 0x75
#define ACCEL_XOUT_H 0x3B
#define GYRO_XOUT_H 0x43
#define MAG_XOUT_L 0x03
#define PWR_MGMT_1 0x6B
#define CONFIG 0x1A

void writeRegister(uint8_t address, uint8_t subAddress, uint8_t data) {
  Wire.beginTransmission(address);
  Wire.write(subAddress);
  Wire.write(data);
  Wire.endTransmission();
}

uint8_t readRegister(uint8_t address, uint8_t subAddress) {
  Wire.beginTransmission(address);
  Wire.write(subAddress);
  Wire.endTransmission(false);
  Wire.requestFrom(address, (size_t)1);
  return Wire.available() ? Wire.read() : 0xFF;
}

void readRegisters(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t *dest) {
  Wire.beginTransmission(address);
  Wire.write(subAddress);
  Wire.endTransmission(false);
  Wire.requestFrom(address, (size_t)count);
  for (uint8_t i = 0; i < count; i++) {
    if (Wire.available()) dest[i] = Wire.read();
  }
}

void setup() {
  Serial.begin(9600);
  Wire.begin();

  // MPU-9250 초기화
  writeRegister(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // 슬립 모드 비활성화
  delay(100);
  writeRegister(MPU9250_ADDRESS, CONFIG, 0x03);    // 설정 초기화
  delay(100);

  // WHO_AM_I 확인
  uint8_t whoAmI = readRegister(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
  if (whoAmI == 0x71) { // MPU9250의 WHO_AM_I 기본값
    Serial.println("MPU-9250 초기화 완료");
  } else {
    Serial.print("MPU-9250를 찾을 수 없습니다. WHO_AM_I: 0x");
    Serial.println(whoAmI, HEX);
    while (1);
  }
}

void loop() {
  uint8_t data[14];

  // 가속도 및 자이로 데이터 읽기
  readRegisters(MPU9250_ADDRESS, ACCEL_XOUT_H, 14, data);

  // 가속도 데이터 변환
  int16_t accelX = (int16_t)((data[0] << 8) | data[1]);
  int16_t accelY = (int16_t)((data[2] << 8) | data[3]);
  int16_t accelZ = (int16_t)((data[4] << 8) | data[5]);

  // 자이로 데이터 변환
  int16_t gyroX = (int16_t)((data[8] << 8) | data[9]);
  int16_t gyroY = (int16_t)((data[10] << 8) | data[11]);
  int16_t gyroZ = (int16_t)((data[12] << 8) | data[13]);

  // 가속도 데이터 출력
  Serial.print("가속도: X=");
  Serial.print(accelX / 16384.0, 2); // 단위: g
  Serial.print(" Y=");
  Serial.print(accelY / 16384.0, 2);
  Serial.print(" Z=");
  Serial.println(accelZ / 16384.0, 2);

  // 자이로 데이터 출력
  Serial.print("자이로: X=");
  Serial.print(gyroX / 131.0, 2); // 단위: deg/s
  Serial.print(" Y=");
  Serial.print(gyroY / 131.0, 2);
  Serial.print(" Z=");
  Serial.println(gyroZ / 131.0, 2);

  // 데이터 출력 간 대기
  delay(500);
}